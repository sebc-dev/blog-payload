name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branche cible'
        required: true
        default: 'main'
      run_snyk:
        description: 'Ex√©cuter Snyk ?'
        required: false
        default: 'true'
      run_deploy:
        description: 'D√©ployer ?'
        required: false
        default: 'false'
      run_e2e:
        description: 'Ex√©cuter les tests E2E ?'
        required: false
        default: 'false'

env:
  NODE_VERSION: '22.x'

# Permissions globales pour le workflow (Security tab)
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test-and-secure:
    name: Test & Secure
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: blog_payload_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref_name }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build
        id: next-build-cache
        uses: actions/cache@v4
        with:
          path: ./.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/next.config.mjs', '**/tsconfig.json') }}-${{ hashFiles('src/**/*.{js,jsx,ts,tsx}') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/next.config.mjs', '**/tsconfig.json') }}-

      - name: Run linting and type checking
        run: |
          pnpm run lint
          pnpm run generate:types
          pnpm run type-check
        env:
          DATABASE_URI_TEST: ${{ secrets.DATABASE_URI_TEST }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run unit and integration tests with coverage
        run: pnpm run test:ci
        env:
          NODE_ENV: test
          DATABASE_URI_TEST: ${{ secrets.DATABASE_URI_TEST }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}

      #      - name: Run E2E tests
      #        if: github.event.inputs.run_e2e == 'true'
      #        run: pnpm run test:e2e

      - name: Run secrets detection scan (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false
          GITLEAKS_NOTIFY_USER_LIST: ""
          GITLEAKS_CONFIG: .gitleaks.toml
          GITLEAKS_ENABLE_SUMMARY: true

      - name: Run dependency vulnerability scan (Snyk)
        if: github.event.inputs.run_snyk == 'true' || github.ref == 'refs/heads/main'
        run: |
          pnpm dlx snyk@latest test --severity-threshold=high || echo "Snyk scan failed but continuing in non-production environment"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-deploy:
    name: Build & Deploy
    needs: [test-and-secure]
    runs-on: ubuntu-latest
    if: github.event.inputs.run_deploy == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref_name }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build-docker-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: blog-payload:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image exists
        run: |
          docker images | grep blog-payload
          if [ $? -ne 0 ]; then
            echo "Image blog-payload not found"
            exit 1
          fi

      - name: Scan built container image with Trivy (SECURITY GATE)
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'blog-payload:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
          hide-progress: false
          timeout: '10m'
          trivyignores: '.trivyignore'
        # On continue m√™me si cette √©tape √©choue pour pouvoir ex√©cuter les √©tapes suivantes
        continue-on-error: true

      - name: ‚ùå Display vulnerabilities in logs on failure
        # Cette √©tape ne s'ex√©cute que si l'√©tape 'trivy-scan' a √©chou√©
        if: steps.trivy-scan.outcome == 'failure'
        run: |
          echo "Des vuln√©rabilit√©s CRITICAL ou HIGH ont √©t√© d√©tect√©es. Affichage du rapport :"
          # On relance Trivy avec un format lisible (table) pour voir les d√©tails dans les logs
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity CRITICAL,HIGH \
            --format table \
            'blog-payload:${{ github.sha }}'
          # On fait √©chouer le job explicitement pour l'arr√™ter
          exit 1

      - name: Verify SARIF file exists and content
        if: always()
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "‚úÖ SARIF file exists"
            echo "üìä File size: $(wc -c < trivy-results.sarif) bytes"
            echo "üìã First 500 characters:"
            head -c 500 trivy-results.sarif
          else
            echo "‚ùå SARIF file not found"
            ls -la
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        # S'ex√©cute toujours pour que le rapport soit disponible dans l'onglet Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

#      - name: Deploy to production
#        if: github.event.inputs.run_deploy == 'true' && github.ref == 'refs/heads/main'
#        env:
#          DATABASE_URI: ${{ secrets.DATABASE_URI }}
#          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
#        run: |
#          echo "üöÄ Deploying image blog-payload:${{ github.sha }}..."
#          ./scripts/deploy.sh blog-payload:${{ github.sha }}
